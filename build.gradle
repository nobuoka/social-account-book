buildscript {
    ext.kotlin_version = '1.2.50'
    ext.ktor_version = '0.9.2'
    ext.kotlinx_coroutines_version = '0.23.3'
    ext.kotlinx_html_version = '0.6.10'
    ext.junit_version = '5.2.0'
    ext.okhttp_version = '3.10.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

subprojects {
    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url 'https://oss.jfrog.org/artifactory/list/oss-snapshot-local' }
    }
}

repositories {
    jcenter()
}

apply plugin: 'jacoco'

task jacocoMerge(type: JacocoMerge) {
    gradle.afterProject { p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('jacoco')) {
            executionData p.tasks.test.jacoco.destinationFile
            dependsOn(p.tasks.test)
        }
    }
}

task jacocoMergedReport(type: JacocoReport, dependsOn: [tasks.jacocoMerge]) {
    executionData jacocoMerge.destinationFile
    sourceDirectories = files()
    classDirectories = files()
    gradle.afterProject { p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('java')) {
            sourceDirectories = sourceDirectories + files([p.sourceSets.main.allJava.srcDirs])
            classDirectories = classDirectories + p.sourceSets.main.output
        }
    }

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

task check(dependsOn: [tasks.jacocoMergedReport])
task build(dependsOn: [tasks.check])

task clean(type: Delete) {
    delete rootProject.buildDir
}
